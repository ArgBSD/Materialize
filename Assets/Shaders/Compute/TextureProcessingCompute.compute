#include "Assets/Shaders/Include/Color.hlsl"

#pragma kernel CSPackNormal
#pragma kernel ConvertToGama
#pragma kernel FlipNormalY

RWTexture2D<float4> Result;
Texture2D<float4> ImageInput;

SamplerState LinearRepeatSample;

float2 _ImageSize;

[numthreads(8,8,1)]
void CSPackNormal (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= uint(_ImageSize.x) || id.y >= uint(_ImageSize.y))
        return;
        
    float2 uv = id.xy / _ImageSize;
    float2 normal = ImageInput.SampleLevel(LinearRepeatSample, uv, 0).xy;

    Result[id.xy] = float4(1.0, normal.g, normal.g, normal.r);
}

[numthreads(8,8,1)]
void ConvertToGama (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= uint(_ImageSize.x) || id.y >= uint(_ImageSize.y))
        return;

    float2 uv = id.xy / _ImageSize;
    float4 col = ImageInput.SampleLevel(LinearRepeatSample, uv, 0);

    Result[id.xy] = LinearToSRGB(col);
}

[numthreads(8,8,1)]
void FlipNormalY (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= uint(_ImageSize.x) || id.y >= uint(_ImageSize.y))
        return;

    float2 uv = id.xy / _ImageSize;
    float3 col = ImageInput.SampleLevel(LinearRepeatSample, uv, 0).xyz;
    col.y = 1.0 - col.y;
    

    Result[id.xy] = float4(col.xyz, 1.0);
}